include(CheckCXXCompilerFlag)

set(SOURCES unused_example attributes_example nstd_example)

if((CMAKE_CXX_COMPILER_ID MATCHES "GNU") OR (CMAKE_CXX_COMPILER_ID MATCHES "Clang"))
    set(CMAKE_VERBOSE_MAKEFILE ON)
    set(OPTIONS -Wall -Wextra -pedantic-errors -Werror)
    check_cxx_compiler_flag(/-Wimplicit-fallthrough HAS_FALLTHROUGH_FLAG)
    if(HAS_FALLTHROUGH_FLAG)
        set(OPTIONS ${OPTIONS} -Wimplicit-fallthrough)
    endif()
elseif(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
    set(OPTIONS /W4 /WX)
    check_cxx_compiler_flag(/permissive HAS_PERMISSIVE_FLAG)
    if(HAS_PERMISSIVE_FLAG)
        set(OPTIONS ${OPTIONS} /permissive-)
    endif()
endif()

function(make_example target std)
    add_executable(${target} ${target}.cpp)
    set_target_properties(${target} PROPERTIES CXX_EXTENSIONS OFF)
    target_compile_options(${target} PRIVATE ${OPTIONS})
    target_link_libraries(${target} PRIVATE ${CMAKE_PROJECT_NAME})
    if(std)
        if(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
            target_compile_options(${target} PRIVATE /std:${std})
        else()
            target_compile_options(${target} PRIVATE -std=${std})
        endif()
    endif()
endfunction()

make_example(attributes_example c++11)
make_example(unused_example c++11)
make_example(nstd_example c++17)
